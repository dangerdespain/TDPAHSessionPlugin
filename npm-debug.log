0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/neil/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package.tgz
12 verbose folder .
13 info prepublish ah-tdp-session-plugin@2.0.0-alpha
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/neil/.npm/1f1177db-tar.lock
16 silly lockFile 51b9fb33-n-plugin-2-0-0-alpha-package-tgz tar:///Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package.tgz
17 verbose lock tar:///Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package.tgz /Users/neil/.npm/51b9fb33-n-plugin-2-0-0-alpha-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 51b9fb33-n-plugin-2-0-0-alpha-package-tgz tar:///Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package.tgz
21 silly lockFile 51b9fb33-n-plugin-2-0-0-alpha-package-tgz tar:///Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package.tgz
22 silly lockFile baa0aac0-ssion-plugin-2-0-0-alpha-package /Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package
23 verbose lock /Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package /Users/neil/.npm/baa0aac0-ssion-plugin-2-0-0-alpha-package.lock
24 silly lockFile baa0aac0-ssion-plugin-2-0-0-alpha-package /Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package
25 silly lockFile baa0aac0-ssion-plugin-2-0-0-alpha-package /Users/neil/.npm/ah-tdp-session-plugin/2.0.0-alpha/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { author: { name: 'Neil Craig', email: 'neil.craig@thedotproduct.org' },
28 silly publish   name: 'ah-tdp-session-plugin',
28 silly publish   description: 'A simple session data handler for the actionhero API framework which uses the built-in Redis backend.',
28 silly publish   version: '2.0.0-alpha',
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'git://github.com/neilstuartcraig/TDPAHSessionPlugin.git' },
28 silly publish   keywords:
28 silly publish    [ 'session',
28 silly publish      'sessions',
28 silly publish      'redis',
28 silly publish      'actionhero',
28 silly publish      'actionherojs',
28 silly publish      'web sockets',
28 silly publish      'websockets',
28 silly publish      'api' ],
28 silly publish   main: './ah-tdp-session-plugin.js',
28 silly publish   dependencies: {},
28 silly publish   devDependencies:
28 silly publish    { actionhero: '10.x',
28 silly publish      mocha: '2.x',
28 silly publish      should: '5.x',
28 silly publish      coveralls: '2.x',
28 silly publish      'mocha-lcov-reporter': '0.x',
28 silly publish      istanbul: '0.x' },
28 silly publish   optionalDependencies: {},
28 silly publish   peerDependencies: { actionhero: '10.x' },
28 silly publish   engines: { node: '>=0.10.x', iojs: '1.x' },
28 silly publish   scripts:
28 silly publish    { postinstall: './scripts/NPMPostInstallScript.sh',
28 silly publish      test: 'mocha ./test --timeout 30000' },
28 silly publish   readme: '#TDPAHSessionPlugin\n\n##Version\nMaster: V2.0.0-alpha  \n\n[![Travis CI build status icon](https://api.travis-ci.org/neilstuartcraig/TDPAHSessionPlugin.svg)](https://travis-ci.org/neilstuartcraig/TDPAHSessionPlugin) \n[![Code Climate](https://codeclimate.com/github/neilstuartcraig/TDPAHSessionPlugin/badges/gpa.svg)](https://codeclimate.com/github/neilstuartcraig/TDPAHSessionPlugin) \n[![Coverage Status](https://img.shields.io/coveralls/neilstuartcraig/TDPAHSessionPlugin.svg)](https://coveralls.io/r/neilstuartcraig/TDPAHSessionPlugin) \n[![Dependency Status](https://gemnasium.com/neilstuartcraig/TDPAHSessionPlugin.svg)](https://gemnasium.com/neilstuartcraig/TDPAHSessionPlugin) \n\n##Semver\nThis project aims to maintain the [semver](http://semver.org/) version numbering scheme.\n\n##Changelog\nSee the [changelog](./changelog.md) file\n\n##Overview\nA simple session data handler for the [actionhero](https://github.com/evantahler/actionhero/) API framework which uses the built-in Redis (or fake-redis for testing) backend.\n\nTDPAHSessionPlugin is designed specifically for use with the actionHero API framework and thus is unlikely to work directly with any other application. You\'re welcome to fork and modify of course if that is of interest of course.\n\n##Features\n* Really simple to use, just store your data in an object (a sub-object of the actionhero `connection` object) and the plugin will handle the rest automatically\n* Uses the built-in Redis cache in actionhero\n* Uses the existing `connection.fingerpint` (or `connection.id` if the fingerprint doesn\'t exist) as the session identifier\n* Very simple to use, minimal (if any) configuration needed\n* Configurable:\n    * Session key prefix (default: "session_")\n    * `connection` sub-object name (default: "sessionData")\n    * Session expiration time (default: 1200 seconds - 20 minutes)\n* Asynchronous operation throughout\n* Included unit tests, automatically run via Travis-CI\n* Included default actions for automated testing\n* Included initialiser\n* Supports dedicated per actionhero environment configurations\n\n##Requirements  \n###Prerequisite since it\'s the plugin host\n* [actionhero](https://github.com/evantahler/actionhero)\n\n###Production requirements\n\n\n###Development/test requirements\n* [mocha](https://github.com/mochajs/mocha)  \n* [should](https://github.com/shouldjs/should.js)\n* [actionhero](https://github.com/evantahler/actionhero)\n\n##Installation\nInstallation is relatively simple and is simplest using `npm`:\n\n```\n# Install actionhero (skip this if you have already got it installed)\nnpm install actionhero\n\n# Generate a skeleton actionhero project (skip if already done)\n./node_modules/.bin/actionhero generate\n\n# Install ah-tdp-session-plugin (and save to package.json file - optional)\nnpm install ah-tdp-session-plugin --save\n```\n\nThen you\'ll need to edit the actionhero config file, `config/api.js` and add the plugin name into the `plugins` array.\n\nAfter that, you can start your API server using `npm start`.\n\nNo doubt you\'ll want to change lots more things but the above is a generic set of instructions.\n\n##Usage\nThis module is an actionhero [plugin](http://actionherojs.com/docs/core/plugins.html) so it conforms to the base requirements, this means it provides:\n\n* Actions\n* An initialiser\n* An editable, userland config file (which is actionhero \'environment\' (development, production etc.) aware) which will appear as `<project root>/config/plugins/TDPAHSessionPlugin.js` assuming the postinstall NPM script worked properly\n* The core module itself\n\n##Configuration\nYou should edit the userland config file as required, this is where you can customise the module to fit your project requirements. This file will not be replaced by module updates so you need to manually keep it up to date, at least until I create some automated method. \n\nFor detailed explanation of the fields, check the userland or [default config file comments](./config/TDPAHSessionPluginConfigDefaults.js).\n\n###Configuration file: environments\nConfiguration options can be defined for all or (overridden) for individual environments using the following structure:  \n\n```\nexports.default=\n{\n    AHTDPSessionPlugin: function(api)\n    {\n        return {\n            ...\n        }\n    }\n}\n\nexports.production=\n{\n    AHTDPSessionPlugin: function(api)\n    {\n        return {\n            ...\n        }\n    }\n}\n\n...\n\n```\n\nThis structure is as per the common actionhero configuration model. The environment is set via a environment variable (on *nix systems this is NODE_ENV) which override the base/default options in exports.defaults{}. So you should put common (environment agnostic/independent) configuration options in the exports.defaults{} section and then override/augment those with any environment-specific options as required.\n\n##Actions\nThe included actions are for automated testing only and can be ignored.\n\n##Constructor\nThe constructor is very simple and since the module is function-scoped, it requires the \'new\' syntax in the constructor to instantiate a new instance e.g.:\n\n```\nvar TDPAHSessionPlugin=require("ah-tdp-session-plugin");\nvar session=new TDPAHSessionPlugin(api); // (where api is the actionhero api instance)\n...\n```\n\nThe module will self-initialise, using the actionhero environment-specific config options. A successful initialisation results in an object being returned\n\n##Public methods\n\n###General principals\nAll public methods conform to the below principals:\n\n* They are asynchronous and thus receive a callback function as the last argument\n* They will (in async mode) return two values, error and result, where:\n    * error is a string, object or array if an error occurred, null otherwise\n    * result is a string, object, array, number etc. on success, null otherwise\n* They will never throw errors, instead they will return accordingly\n* All arguments are required\n\n\n###load(connection, next, callback)\nLoad any existing session data (onto the configured sub-object of the `connection` object).\n\n####Arguments\n#####connection (object)\nThe actionhero `connection` object\n\n#####next (string)\nThe actionhero `next()` function\n\n#####callback (function)\nThe callback function to execute on completion of this function. \n\n####Returns (callback arguments)\nThe callback function currently receives two arguments:\n* `err` (string || null) - A descriptive error or `null` if no error occurred\n* `sessionData` (object || null) - the loaded sessionData object (or `null` if an error occurred)\n\n\n\n###save(connection, next, callback)\nSave session data (from the configured sub-object of the `connection` object) to the storage backend (redis).\n\n####Arguments\n#####connection (object)\nThe actionhero `connection` object\n\n#####next (string)\nThe actionhero `next()` function\n\n#####callback (function)\nThe callback function to execute on completion of this function. \n\n####Returns (callback arguments)\nThe callback function currently receives two arguments:\n* `err` (string || null) - A descriptive error or `null` if no error occurred\n* `success` (boolean || null) - true on success (or `null` if an error occurred)\n\n\n###destroy(connection, next, callback)\nDestroy session data in the storage backend (redis).\n\n####Arguments\n#####connection (object)\nThe actionhero `connection` object\n\n#####next (string)\nThe actionhero `next()` function\n\n#####callback (function)\nThe callback function to execute on completion of this function. \n\n####Returns (callback arguments)\nThe callback function currently receives two arguments:\n* `err` (string || null) - A descriptive error or `null` if no error occurred\n* `success` (boolean || null) - true on success (or `null` if an error occurred)\n\n\n##To do/roadmap\n* Include the `destroy()` method in the unit tests\n* Consider sanitising input (at least as an option)\n* Consider adding a dedicated storage layer (option) to enable better security through segregation\n* Consider encryption of session data\n\n\n##Tests\n[Tests](./test) currently run automatically in `travis` and use `mocha` and `should`.\n\n\n##License\nTDPAHSessionPlugin is issued under a [Creative Commons attribution share-alike license](http://creativecommons.org/licenses/by-sa/4.0/deed.en_GB).\nThis means you can share and adapt the code provided you attribute the original aclor(s) and you share your resulting source code. If, for some specific reason you need to use this library under a different license then please contact me and i\'ll see what I can do - though I should mention that I am committed to all my code being open-source so closed licenses will almost certainly not be possible.\n',
28 silly publish   readmeFilename: 'readme.md',
28 silly publish   gitHead: '11530c4abed0bc013d4c433f81ac1782a583489a',
28 silly publish   bugs: { url: 'https://github.com/neilstuartcraig/TDPAHSessionPlugin/issues' },
28 silly publish   homepage: 'https://github.com/neilstuartcraig/TDPAHSessionPlugin',
28 silly publish   _id: 'ah-tdp-session-plugin@2.0.0-alpha',
28 silly publish   _shasum: 'b7c52ab86d7671977a9d956ea99afa3df5f4b79b',
28 silly publish   _from: '.' }
29 verbose request where is /ah-tdp-session-plugin
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 8d242cee42ed5e21
32 verbose url raw /ah-tdp-session-plugin
33 verbose url resolving [ 'https://registry.npmjs.org/', './ah-tdp-session-plugin' ]
34 verbose url resolved https://registry.npmjs.org/ah-tdp-session-plugin
35 verbose request where is https://registry.npmjs.org/ah-tdp-session-plugin
36 info trying registry request attempt 1 at 22:47:43
37 http PUT https://registry.npmjs.org/ah-tdp-session-plugin
38 http 403 https://registry.npmjs.org/ah-tdp-session-plugin
39 verbose headers { date: 'Fri, 20 Feb 2015 22:47:44 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '13263',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-lhr6333-LHR',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1424472463.359753,VS0,VE776',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 2.0.0-alpha
41 error old={"author":{"name":"Neil Craig","email":"neil.craig@thedotproduct.org"},"name":"ah-tdp-session-plugin","description":"A simple session data handler for the actionhero API framework which uses the built-in Redis backend.","version":"2.0.0-alpha","repository":{"type":"git","url":"git://github.com/neilstuartcraig/TDPAHSessionPlugin.git"},"keywords":["session","sessions","redis","actionhero","actionherojs","web sockets","websockets","api"],"main":"./ah-tdp-session-plugin.js","dependencies":{},"devDependencies":{"actionhero":"10.x","mocha":"2.x","should":"5.x","coveralls":"2.x","mocha-lcov-reporter":"0.x","istanbul":"0.x"},"optionalDependencies":{},"peerDependencies":{"actionhero":"10.x"},"engines":{"node":">=0.10.x","iojs":"1.x"},"scripts":{"postinstall":"./scripts/NPMPostInstallScript.sh","test":"mocha ./test --timeout 30000"},"gitHead":"bcc39b80493f358e02ec5a7fcc7549d5cac01a72","bugs":{"url":"https://github.com/neilstuartcraig/TDPAHSessionPlugin/issues"},"homepage":"https://github.com/neilstuartcraig/TDPAHSessionPlugin","_id":"ah-tdp-session-plugin@2.0.0-alpha","_shasum":"908cf75bdccdaac8cb753045db0997221f5afc72","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"tdp_org","email":"neil.craig@thedotproduct.org"},"maintainers":[{"name":"tdp_org","email":"neil.craig@thedotproduct.org"}],"dist":{"shasum":"908cf75bdccdaac8cb753045db0997221f5afc72","tarball":"http://registry.npmjs.org/ah-tdp-session-plugin/-/ah-tdp-session-plugin-2.0.0-alpha.tgz"}}
41 error new={"author":{"name":"Neil Craig","email":"neil.craig@thedotproduct.org"},"name":"ah-tdp-session-plugin","description":"A simple session data handler for the actionhero API framework which uses the built-in Redis backend.","version":"2.0.0-alpha","repository":{"type":"git","url":"git://github.com/neilstuartcraig/TDPAHSessionPlugin.git"},"keywords":["session","sessions","redis","actionhero","actionherojs","web sockets","websockets","api"],"main":"./ah-tdp-session-plugin.js","dependencies":{},"devDependencies":{"actionhero":"10.x","mocha":"2.x","should":"5.x","coveralls":"2.x","mocha-lcov-reporter":"0.x","istanbul":"0.x"},"optionalDependencies":{},"peerDependencies":{"actionhero":"10.x"},"engines":{"node":">=0.10.x","iojs":"1.x"},"scripts":{"postinstall":"./scripts/NPMPostInstallScript.sh","test":"mocha ./test --timeout 30000"},"readme":"#TDPAHSessionPlugin\u000a\u000a##Version\u000aMaster: V2.0.0-alpha  \u000a\u000a[![Travis CI build status icon](https://api.travis-ci.org/neilstuartcraig/TDPAHSessionPlugin.svg)](https://travis-ci.org/neilstuartcraig/TDPAHSessionPlugin) \u000a[![Code Climate](https://codeclimate.com/github/neilstuartcraig/TDPAHSessionPlugin/badges/gpa.svg)](https://codeclimate.com/github/neilstuartcraig/TDPAHSessionPlugin) \u000a[![Coverage Status](https://img.shields.io/coveralls/neilstuartcraig/TDPAHSessionPlugin.svg)](https://coveralls.io/r/neilstuartcraig/TDPAHSessionPlugin) \u000a[![Dependency Status](https://gemnasium.com/neilstuartcraig/TDPAHSessionPlugin.svg)](https://gemnasium.com/neilstuartcraig/TDPAHSessionPlugin) \u000a\u000a##Semver\u000aThis project aims to maintain the [semver](http://semver.org/) version numbering scheme.\u000a\u000a##Changelog\u000aSee the [changelog](./changelog.md) file\u000a\u000a##Overview\u000aA simple session data handler for the [actionhero](https://github.com/evantahler/actionhero/) API framework which uses the built-in Redis (or fake-redis for testing) backend.\u000a\u000aTDPAHSessionPlugin is designed specifically for use with the actionHero API framework and thus is unlikely to work directly with any other application. You're welcome to fork and modify of course if that is of interest of course.\u000a\u000a##Features\u000a* Really simple to use, just store your data in an object (a sub-object of the actionhero `connection` object) and the plugin will handle the rest automatically\u000a* Uses the built-in Redis cache in actionhero\u000a* Uses the existing `connection.fingerpint` (or `connection.id` if the fingerprint doesn't exist) as the session identifier\u000a* Very simple to use, minimal (if any) configuration needed\u000a* Configurable:\u000a    * Session key prefix (default: \"session_\")\u000a    * `connection` sub-object name (default: \"sessionData\")\u000a    * Session expiration time (default: 1200 seconds - 20 minutes)\u000a* Asynchronous operation throughout\u000a* Included unit tests, automatically run via Travis-CI\u000a* Included default actions for automated testing\u000a* Included initialiser\u000a* Supports dedicated per actionhero environment configurations\u000a\u000a##Requirements  \u000a###Prerequisite since it's the plugin host\u000a* [actionhero](https://github.com/evantahler/actionhero)\u000a\u000a###Production requirements\u000a\u000a\u000a###Development/test requirements\u000a* [mocha](https://github.com/mochajs/mocha)  \u000a* [should](https://github.com/shouldjs/should.js)\u000a* [actionhero](https://github.com/evantahler/actionhero)\u000a\u000a##Installation\u000aInstallation is relatively simple and is simplest using `npm`:\u000a\u000a```\u000a# Install actionhero (skip this if you have already got it installed)\u000anpm install actionhero\u000a\u000a# Generate a skeleton actionhero project (skip if already done)\u000a./node_modules/.bin/actionhero generate\u000a\u000a# Install ah-tdp-session-plugin (and save to package.json file - optional)\u000anpm install ah-tdp-session-plugin --save\u000a```\u000a\u000aThen you'll need to edit the actionhero config file, `config/api.js` and add the plugin name into the `plugins` array.\u000a\u000aAfter that, you can start your API server using `npm start`.\u000a\u000aNo doubt you'll want to change lots more things but the above is a generic set of instructions.\u000a\u000a##Usage\u000aThis module is an actionhero [plugin](http://actionherojs.com/docs/core/plugins.html) so it conforms to the base requirements, this means it provides:\u000a\u000a* Actions\u000a* An initialiser\u000a* An editable, userland config file (which is actionhero 'environment' (development, production etc.) aware) which will appear as `<project root>/config/plugins/TDPAHSessionPlugin.js` assuming the postinstall NPM script worked properly\u000a* The core module itself\u000a\u000a##Configuration\u000aYou should edit the userland config file as required, this is where you can customise the module to fit your project requirements. This file will not be replaced by module updates so you need to manually keep it up to date, at least until I create some automated method. \u000a\u000aFor detailed explanation of the fields, check the userland or [default config file comments](./config/TDPAHSessionPluginConfigDefaults.js).\u000a\u000a###Configuration file: environments\u000aConfiguration options can be defined for all or (overridden) for individual environments using the following structure:  \u000a\u000a```\u000aexports.default=\u000a{\u000a    AHTDPSessionPlugin: function(api)\u000a    {\u000a        return {\u000a            ...\u000a        }\u000a    }\u000a}\u000a\u000aexports.production=\u000a{\u000a    AHTDPSessionPlugin: function(api)\u000a    {\u000a        return {\u000a            ...\u000a        }\u000a    }\u000a}\u000a\u000a...\u000a\u000a```\u000a\u000aThis structure is as per the common actionhero configuration model. The environment is set via a environment variable (on *nix systems this is NODE_ENV) which override the base/default options in exports.defaults{}. So you should put common (environment agnostic/independent) configuration options in the exports.defaults{} section and then override/augment those with any environment-specific options as required.\u000a\u000a##Actions\u000aThe included actions are for automated testing only and can be ignored.\u000a\u000a##Constructor\u000aThe constructor is very simple and since the module is function-scoped, it requires the 'new' syntax in the constructor to instantiate a new instance e.g.:\u000a\u000a```\u000avar TDPAHSessionPlugin=require(\"ah-tdp-session-plugin\");\u000avar session=new TDPAHSessionPlugin(api); // (where api is the actionhero api instance)\u000a...\u000a```\u000a\u000aThe module will self-initialise, using the actionhero environment-specific config options. A successful initialisation results in an object being returned\u000a\u000a##Public methods\u000a\u000a###General principals\u000aAll public methods conform to the below principals:\u000a\u000a* They are asynchronous and thus receive a callback function as the last argument\u000a* They will (in async mode) return two values, error and result, where:\u000a    * error is a string, object or array if an error occurred, null otherwise\u000a    * result is a string, object, array, number etc. on success, null otherwise\u000a* They will never throw errors, instead they will return accordingly\u000a* All arguments are required\u000a\u000a\u000a###load(connection, next, callback)\u000aLoad any existing session data (onto the configured sub-object of the `connection` object).\u000a\u000a####Arguments\u000a#####connection (object)\u000aThe actionhero `connection` object\u000a\u000a#####next (string)\u000aThe actionhero `next()` function\u000a\u000a#####callback (function)\u000aThe callback function to execute on completion of this function. \u000a\u000a####Returns (callback arguments)\u000aThe callback function currently receives two arguments:\u000a* `err` (string || null) - A descriptive error or `null` if no error occurred\u000a* `sessionData` (object || null) - the loaded sessionData object (or `null` if an error occurred)\u000a\u000a\u000a\u000a###save(connection, next, callback)\u000aSave session data (from the configured sub-object of the `connection` object) to the storage backend (redis).\u000a\u000a####Arguments\u000a#####connection (object)\u000aThe actionhero `connection` object\u000a\u000a#####next (string)\u000aThe actionhero `next()` function\u000a\u000a#####callback (function)\u000aThe callback function to execute on completion of this function. \u000a\u000a####Returns (callback arguments)\u000aThe callback function currently receives two arguments:\u000a* `err` (string || null) - A descriptive error or `null` if no error occurred\u000a* `success` (boolean || null) - true on success (or `null` if an error occurred)\u000a\u000a\u000a###destroy(connection, next, callback)\u000aDestroy session data in the storage backend (redis).\u000a\u000a####Arguments\u000a#####connection (object)\u000aThe actionhero `connection` object\u000a\u000a#####next (string)\u000aThe actionhero `next()` function\u000a\u000a#####callback (function)\u000aThe callback function to execute on completion of this function. \u000a\u000a####Returns (callback arguments)\u000aThe callback function currently receives two arguments:\u000a* `err` (string || null) - A descriptive error or `null` if no error occurred\u000a* `success` (boolean || null) - true on success (or `null` if an error occurred)\u000a\u000a\u000a##To do/roadmap\u000a* Include the `destroy()` method in the unit tests\u000a* Consider sanitising input (at least as an option)\u000a* Consider adding a dedicated storage layer (option) to enable better security through segregation\u000a* Consider encryption of session data\u000a\u000a\u000a##Tests\u000a[Tests](./test) currently run automatically in `travis` and use `mocha` and `should`.\u000a\u000a\u000a##License\u000aTDPAHSessionPlugin is issued under a [Creative Commons attribution share-alike license](http://creativecommons.org/licenses/by-sa/4.0/deed.en_GB).\u000aThis means you can share and adapt the code provided you attribute the original aclor(s) and you share your resulting source code. If, for some specific reason you need to use this library under a different license then please contact me and i'll see what I can do - though I should mention that I am committed to all my code being open-source so closed licenses will almost certainly not be possible.\u000a","readmeFilename":"readme.md","gitHead":"11530c4abed0bc013d4c433f81ac1782a583489a","bugs":{"url":"https://github.com/neilstuartcraig/TDPAHSessionPlugin/issues"},"homepage":"https://github.com/neilstuartcraig/TDPAHSessionPlugin","_id":"ah-tdp-session-plugin@2.0.0-alpha","_shasum":"b7c52ab86d7671977a9d956ea99afa3df5f4b79b","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"tdp_org","email":"neil.craig@thedotproduct.org"},"maintainers":[{"name":"tdp_org","email":"neil.craig@thedotproduct.org"}],"dist":{"shasum":"b7c52ab86d7671977a9d956ea99afa3df5f4b79b","tarball":"http://registry.npmjs.org/ah-tdp-session-plugin/-/ah-tdp-session-plugin-2.0.0-alpha.tgz"}}: ah-tdp-session-plugin
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 14.0.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/neil/webdev/ah-tdp-session-plugin
46 error node -v v0.10.33
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
